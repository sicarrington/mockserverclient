/* 
 * Mock Server API
 *
 * MockServer enables easy mocking of any system you integrate with via HTTP or HTTPS with clients written in Java, JavaScript and Ruby and a simple REST API (as shown below).  MockServer Proxy is a proxy that introspects all proxied traffic including encrypted SSL traffic and supports Port Forwarding, Web Proxying (i.e. HTTP proxy), HTTPS Tunneling Proxying (using HTTP CONNECT) and SOCKS Proxying (i.e. dynamic port forwarding).  Both MockServer and the MockServer Proxy record all received requests so that it is possible to verify exactly what requests have been sent by the system under test.
 *
 * OpenAPI spec version: 5.6.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace MockServer.Client.Net.Models
{
    /// <summary>
    /// Expectation
    /// </summary>
    [DataContract]
    public partial class Expectation : IEquatable<Expectation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Expectation" /> class.
        /// </summary>
        /// <param name="httpRequest">httpRequest.</param>
        /// <param name="httpResponse">httpResponse.</param>
        /// <param name="httpResponseTemplate">httpResponseTemplate.</param>
        /// <param name="httpResponseClassCallback">httpResponseClassCallback.</param>
        /// <param name="httpResponseObjectCallback">httpResponseObjectCallback.</param>
        /// <param name="httpForward">httpForward.</param>
        /// <param name="httpForwardTemplate">httpForwardTemplate.</param>
        /// <param name="httpForwardClassCallback">httpForwardClassCallback.</param>
        /// <param name="httpForwardObjectCallback">httpForwardObjectCallback.</param>
        /// <param name="httpOverrideForwardedRequest">httpOverrideForwardedRequest.</param>
        /// <param name="httpError">httpError.</param>
        /// <param name="times">times.</param>
        /// <param name="timeToLive">timeToLive.</param>
        public Expectation(HttpRequest httpRequest = default(HttpRequest), HttpResponse httpResponse = default(HttpResponse), HttpTemplate httpResponseTemplate = default(HttpTemplate), HttpClassCallback httpResponseClassCallback = default(HttpClassCallback), HttpObjectCallback httpResponseObjectCallback = default(HttpObjectCallback), HttpForward httpForward = default(HttpForward), HttpTemplate httpForwardTemplate = default(HttpTemplate), HttpClassCallback httpForwardClassCallback = default(HttpClassCallback), HttpObjectCallback httpForwardObjectCallback = default(HttpObjectCallback), HttpOverrideForwardedRequest httpOverrideForwardedRequest = default(HttpOverrideForwardedRequest), HttpError httpError = default(HttpError), Times times = default(Times), TimeToLive timeToLive = default(TimeToLive))
        {
            this.HttpRequest = httpRequest;
            this.HttpResponse = httpResponse;
            this.HttpResponseTemplate = httpResponseTemplate;
            this.HttpResponseClassCallback = httpResponseClassCallback;
            this.HttpResponseObjectCallback = httpResponseObjectCallback;
            this.HttpForward = httpForward;
            this.HttpForwardTemplate = httpForwardTemplate;
            this.HttpForwardClassCallback = httpForwardClassCallback;
            this.HttpForwardObjectCallback = httpForwardObjectCallback;
            this.HttpOverrideForwardedRequest = httpOverrideForwardedRequest;
            this.HttpError = httpError;
            this.Times = times;
            this.TimeToLive = timeToLive;
        }

        /// <summary>
        /// Gets or Sets HttpRequest
        /// </summary>
        [DataMember(Name = "httpRequest", EmitDefaultValue = false)]
        // [JsonPropertyName("httpRequest")]
        public HttpRequest HttpRequest { get; set; }

        /// <summary>
        /// Gets or Sets HttpResponse
        /// </summary>
        [DataMember(Name = "httpResponse", EmitDefaultValue = false)]
        // [JsonPropertyName("httpResponse")]
        public HttpResponse HttpResponse { get; set; }

        /// <summary>
        /// Gets or Sets HttpResponseTemplate
        /// </summary>
        [DataMember(Name = "httpResponseTemplate", EmitDefaultValue = false)]
        // [JsonPropertyName("httpResponseTemplate")]
        public HttpTemplate HttpResponseTemplate { get; set; }

        /// <summary>
        /// Gets or Sets HttpResponseClassCallback
        /// </summary>
        [DataMember(Name = "httpResponseClassCallback", EmitDefaultValue = false)]
        // [JsonPropertyName("httpResponseClassCallback")]
        public HttpClassCallback HttpResponseClassCallback { get; set; }

        /// <summary>
        /// Gets or Sets HttpResponseObjectCallback
        /// </summary>
        [DataMember(Name = "httpResponseObjectCallback", EmitDefaultValue = false)]
        // [JsonPropertyName("httpResponseObjectCallback")]
        public HttpObjectCallback HttpResponseObjectCallback { get; set; }

        /// <summary>
        /// Gets or Sets HttpForward
        /// </summary>
        [DataMember(Name = "httpForward", EmitDefaultValue = false)]
        // [JsonPropertyName("httpForward")]
        public HttpForward HttpForward { get; set; }

        /// <summary>
        /// Gets or Sets HttpForwardTemplate
        /// </summary>
        [DataMember(Name = "httpForwardTemplate", EmitDefaultValue = false)]
        // [JsonPropertyName("httpForwardTemplate")]
        public HttpTemplate HttpForwardTemplate { get; set; }

        /// <summary>
        /// Gets or Sets HttpForwardClassCallback
        /// </summary>
        [DataMember(Name = "httpForwardClassCallback", EmitDefaultValue = false)]
        // [JsonPropertyName("httpForwardClassCallback")]
        public HttpClassCallback HttpForwardClassCallback { get; set; }

        /// <summary>
        /// Gets or Sets HttpForwardObjectCallback
        /// </summary>
        [DataMember(Name = "httpForwardObjectCallback", EmitDefaultValue = false)]
        // [JsonPropertyName("httpForwardObjectCallback")]
        public HttpObjectCallback HttpForwardObjectCallback { get; set; }

        /// <summary>
        /// Gets or Sets HttpOverrideForwardedRequest
        /// </summary>
        [DataMember(Name = "httpOverrideForwardedRequest", EmitDefaultValue = false)]
        // [JsonPropertyName("httpOverrideForwardedRequest")]
        public HttpOverrideForwardedRequest HttpOverrideForwardedRequest { get; set; }

        /// <summary>
        /// Gets or Sets HttpError
        /// </summary>
        [DataMember(Name = "httpError", EmitDefaultValue = false)]
        // [JsonPropertyName("httpError")]
        public HttpError HttpError { get; set; }

        /// <summary>
        /// Gets or Sets Times
        /// </summary>
        [DataMember(Name = "times", EmitDefaultValue = false)]
        // [JsonPropertyName("times")]
        public Times Times { get; set; }

        /// <summary>
        /// Gets or Sets TimeToLive
        /// </summary>
        [DataMember(Name = "timeToLive", EmitDefaultValue = false)]
        // [JsonPropertyName("timeToLive")]
        public TimeToLive TimeToLive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Expectation {\n");
            sb.Append("  HttpRequest: ").Append(HttpRequest).Append("\n");
            sb.Append("  HttpResponse: ").Append(HttpResponse).Append("\n");
            sb.Append("  HttpResponseTemplate: ").Append(HttpResponseTemplate).Append("\n");
            sb.Append("  HttpResponseClassCallback: ").Append(HttpResponseClassCallback).Append("\n");
            sb.Append("  HttpResponseObjectCallback: ").Append(HttpResponseObjectCallback).Append("\n");
            sb.Append("  HttpForward: ").Append(HttpForward).Append("\n");
            sb.Append("  HttpForwardTemplate: ").Append(HttpForwardTemplate).Append("\n");
            sb.Append("  HttpForwardClassCallback: ").Append(HttpForwardClassCallback).Append("\n");
            sb.Append("  HttpForwardObjectCallback: ").Append(HttpForwardObjectCallback).Append("\n");
            sb.Append("  HttpOverrideForwardedRequest: ").Append(HttpOverrideForwardedRequest).Append("\n");
            sb.Append("  HttpError: ").Append(HttpError).Append("\n");
            sb.Append("  Times: ").Append(Times).Append("\n");
            sb.Append("  TimeToLive: ").Append(TimeToLive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonSerializer.Serialize(this, JsonSerializerOptionsContants.Default);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Expectation);
        }

        /// <summary>
        /// Returns true if Expectation instances are equal
        /// </summary>
        /// <param name="input">Instance of Expectation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Expectation input)
        {
            if (input == null)
                return false;

            return
                (
                    this.HttpRequest == input.HttpRequest ||
                    (this.HttpRequest != null &&
                    this.HttpRequest.Equals(input.HttpRequest))
                ) &&
                (
                    this.HttpResponse == input.HttpResponse ||
                    (this.HttpResponse != null &&
                    this.HttpResponse.Equals(input.HttpResponse))
                ) &&
                (
                    this.HttpResponseTemplate == input.HttpResponseTemplate ||
                    (this.HttpResponseTemplate != null &&
                    this.HttpResponseTemplate.Equals(input.HttpResponseTemplate))
                ) &&
                (
                    this.HttpResponseClassCallback == input.HttpResponseClassCallback ||
                    (this.HttpResponseClassCallback != null &&
                    this.HttpResponseClassCallback.Equals(input.HttpResponseClassCallback))
                ) &&
                (
                    this.HttpResponseObjectCallback == input.HttpResponseObjectCallback ||
                    (this.HttpResponseObjectCallback != null &&
                    this.HttpResponseObjectCallback.Equals(input.HttpResponseObjectCallback))
                ) &&
                (
                    this.HttpForward == input.HttpForward ||
                    (this.HttpForward != null &&
                    this.HttpForward.Equals(input.HttpForward))
                ) &&
                (
                    this.HttpForwardTemplate == input.HttpForwardTemplate ||
                    (this.HttpForwardTemplate != null &&
                    this.HttpForwardTemplate.Equals(input.HttpForwardTemplate))
                ) &&
                (
                    this.HttpForwardClassCallback == input.HttpForwardClassCallback ||
                    (this.HttpForwardClassCallback != null &&
                    this.HttpForwardClassCallback.Equals(input.HttpForwardClassCallback))
                ) &&
                (
                    this.HttpForwardObjectCallback == input.HttpForwardObjectCallback ||
                    (this.HttpForwardObjectCallback != null &&
                    this.HttpForwardObjectCallback.Equals(input.HttpForwardObjectCallback))
                ) &&
                (
                    this.HttpOverrideForwardedRequest == input.HttpOverrideForwardedRequest ||
                    (this.HttpOverrideForwardedRequest != null &&
                    this.HttpOverrideForwardedRequest.Equals(input.HttpOverrideForwardedRequest))
                ) &&
                (
                    this.HttpError == input.HttpError ||
                    (this.HttpError != null &&
                    this.HttpError.Equals(input.HttpError))
                ) &&
                (
                    this.Times == input.Times ||
                    (this.Times != null &&
                    this.Times.Equals(input.Times))
                ) &&
                (
                    this.TimeToLive == input.TimeToLive ||
                    (this.TimeToLive != null &&
                    this.TimeToLive.Equals(input.TimeToLive))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HttpRequest != null)
                    hashCode = hashCode * 59 + this.HttpRequest.GetHashCode();
                if (this.HttpResponse != null)
                    hashCode = hashCode * 59 + this.HttpResponse.GetHashCode();
                if (this.HttpResponseTemplate != null)
                    hashCode = hashCode * 59 + this.HttpResponseTemplate.GetHashCode();
                if (this.HttpResponseClassCallback != null)
                    hashCode = hashCode * 59 + this.HttpResponseClassCallback.GetHashCode();
                if (this.HttpResponseObjectCallback != null)
                    hashCode = hashCode * 59 + this.HttpResponseObjectCallback.GetHashCode();
                if (this.HttpForward != null)
                    hashCode = hashCode * 59 + this.HttpForward.GetHashCode();
                if (this.HttpForwardTemplate != null)
                    hashCode = hashCode * 59 + this.HttpForwardTemplate.GetHashCode();
                if (this.HttpForwardClassCallback != null)
                    hashCode = hashCode * 59 + this.HttpForwardClassCallback.GetHashCode();
                if (this.HttpForwardObjectCallback != null)
                    hashCode = hashCode * 59 + this.HttpForwardObjectCallback.GetHashCode();
                if (this.HttpOverrideForwardedRequest != null)
                    hashCode = hashCode * 59 + this.HttpOverrideForwardedRequest.GetHashCode();
                if (this.HttpError != null)
                    hashCode = hashCode * 59 + this.HttpError.GetHashCode();
                if (this.Times != null)
                    hashCode = hashCode * 59 + this.Times.GetHashCode();
                if (this.TimeToLive != null)
                    hashCode = hashCode * 59 + this.TimeToLive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
